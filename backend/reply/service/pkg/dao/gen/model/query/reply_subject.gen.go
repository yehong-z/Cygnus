// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yehong-z/Cygnus/reply/service/pkg/dao/gen/model/model"
)

func newReplySubject(db *gorm.DB, opts ...gen.DOOption) replySubject {
	_replySubject := replySubject{}

	_replySubject.replySubjectDo.UseDB(db, opts...)
	_replySubject.replySubjectDo.UseModel(&model.ReplySubject{})

	tableName := _replySubject.replySubjectDo.TableName()
	_replySubject.ALL = field.NewAsterisk(tableName)
	_replySubject.ID = field.NewInt64(tableName, "id")
	_replySubject.SubjectID = field.NewInt64(tableName, "subject_id")
	_replySubject.UserID = field.NewInt64(tableName, "user_id")
	_replySubject.FloorCount = field.NewInt64(tableName, "floor_count")
	_replySubject.RootCount = field.NewInt64(tableName, "root_count")
	_replySubject.SumCount = field.NewInt64(tableName, "sum_count")
	_replySubject.State = field.NewInt64(tableName, "state")
	_replySubject.Ctime = field.NewTime(tableName, "ctime")
	_replySubject.Mtime = field.NewTime(tableName, "mtime")

	_replySubject.fillFieldMap()

	return _replySubject
}

type replySubject struct {
	replySubjectDo replySubjectDo

	ALL        field.Asterisk
	ID         field.Int64
	SubjectID  field.Int64
	UserID     field.Int64
	FloorCount field.Int64
	RootCount  field.Int64
	SumCount   field.Int64
	State      field.Int64
	Ctime      field.Time
	Mtime      field.Time

	fieldMap map[string]field.Expr
}

func (r replySubject) Table(newTableName string) *replySubject {
	r.replySubjectDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r replySubject) As(alias string) *replySubject {
	r.replySubjectDo.DO = *(r.replySubjectDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *replySubject) updateTableName(table string) *replySubject {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.SubjectID = field.NewInt64(table, "subject_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.FloorCount = field.NewInt64(table, "floor_count")
	r.RootCount = field.NewInt64(table, "root_count")
	r.SumCount = field.NewInt64(table, "sum_count")
	r.State = field.NewInt64(table, "state")
	r.Ctime = field.NewTime(table, "ctime")
	r.Mtime = field.NewTime(table, "mtime")

	r.fillFieldMap()

	return r
}

func (r *replySubject) WithContext(ctx context.Context) IReplySubjectDo {
	return r.replySubjectDo.WithContext(ctx)
}

func (r replySubject) TableName() string { return r.replySubjectDo.TableName() }

func (r replySubject) Alias() string { return r.replySubjectDo.Alias() }

func (r replySubject) Columns(cols ...field.Expr) gen.Columns {
	return r.replySubjectDo.Columns(cols...)
}

func (r *replySubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *replySubject) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["subject_id"] = r.SubjectID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["floor_count"] = r.FloorCount
	r.fieldMap["root_count"] = r.RootCount
	r.fieldMap["sum_count"] = r.SumCount
	r.fieldMap["state"] = r.State
	r.fieldMap["ctime"] = r.Ctime
	r.fieldMap["mtime"] = r.Mtime
}

func (r replySubject) clone(db *gorm.DB) replySubject {
	r.replySubjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r replySubject) replaceDB(db *gorm.DB) replySubject {
	r.replySubjectDo.ReplaceDB(db)
	return r
}

type replySubjectDo struct{ gen.DO }

type IReplySubjectDo interface {
	gen.SubQuery
	Debug() IReplySubjectDo
	WithContext(ctx context.Context) IReplySubjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReplySubjectDo
	WriteDB() IReplySubjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReplySubjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReplySubjectDo
	Not(conds ...gen.Condition) IReplySubjectDo
	Or(conds ...gen.Condition) IReplySubjectDo
	Select(conds ...field.Expr) IReplySubjectDo
	Where(conds ...gen.Condition) IReplySubjectDo
	Order(conds ...field.Expr) IReplySubjectDo
	Distinct(cols ...field.Expr) IReplySubjectDo
	Omit(cols ...field.Expr) IReplySubjectDo
	Join(table schema.Tabler, on ...field.Expr) IReplySubjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReplySubjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReplySubjectDo
	Group(cols ...field.Expr) IReplySubjectDo
	Having(conds ...gen.Condition) IReplySubjectDo
	Limit(limit int) IReplySubjectDo
	Offset(offset int) IReplySubjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReplySubjectDo
	Unscoped() IReplySubjectDo
	Create(values ...*model.ReplySubject) error
	CreateInBatches(values []*model.ReplySubject, batchSize int) error
	Save(values ...*model.ReplySubject) error
	First() (*model.ReplySubject, error)
	Take() (*model.ReplySubject, error)
	Last() (*model.ReplySubject, error)
	Find() ([]*model.ReplySubject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReplySubject, err error)
	FindInBatches(result *[]*model.ReplySubject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReplySubject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReplySubjectDo
	Assign(attrs ...field.AssignExpr) IReplySubjectDo
	Joins(fields ...field.RelationField) IReplySubjectDo
	Preload(fields ...field.RelationField) IReplySubjectDo
	FirstOrInit() (*model.ReplySubject, error)
	FirstOrCreate() (*model.ReplySubject, error)
	FindByPage(offset int, limit int) (result []*model.ReplySubject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReplySubjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r replySubjectDo) Debug() IReplySubjectDo {
	return r.withDO(r.DO.Debug())
}

func (r replySubjectDo) WithContext(ctx context.Context) IReplySubjectDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r replySubjectDo) ReadDB() IReplySubjectDo {
	return r.Clauses(dbresolver.Read)
}

func (r replySubjectDo) WriteDB() IReplySubjectDo {
	return r.Clauses(dbresolver.Write)
}

func (r replySubjectDo) Session(config *gorm.Session) IReplySubjectDo {
	return r.withDO(r.DO.Session(config))
}

func (r replySubjectDo) Clauses(conds ...clause.Expression) IReplySubjectDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r replySubjectDo) Returning(value interface{}, columns ...string) IReplySubjectDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r replySubjectDo) Not(conds ...gen.Condition) IReplySubjectDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r replySubjectDo) Or(conds ...gen.Condition) IReplySubjectDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r replySubjectDo) Select(conds ...field.Expr) IReplySubjectDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r replySubjectDo) Where(conds ...gen.Condition) IReplySubjectDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r replySubjectDo) Order(conds ...field.Expr) IReplySubjectDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r replySubjectDo) Distinct(cols ...field.Expr) IReplySubjectDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r replySubjectDo) Omit(cols ...field.Expr) IReplySubjectDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r replySubjectDo) Join(table schema.Tabler, on ...field.Expr) IReplySubjectDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r replySubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReplySubjectDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r replySubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) IReplySubjectDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r replySubjectDo) Group(cols ...field.Expr) IReplySubjectDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r replySubjectDo) Having(conds ...gen.Condition) IReplySubjectDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r replySubjectDo) Limit(limit int) IReplySubjectDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r replySubjectDo) Offset(offset int) IReplySubjectDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r replySubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReplySubjectDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r replySubjectDo) Unscoped() IReplySubjectDo {
	return r.withDO(r.DO.Unscoped())
}

func (r replySubjectDo) Create(values ...*model.ReplySubject) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r replySubjectDo) CreateInBatches(values []*model.ReplySubject, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r replySubjectDo) Save(values ...*model.ReplySubject) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r replySubjectDo) First() (*model.ReplySubject, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplySubject), nil
	}
}

func (r replySubjectDo) Take() (*model.ReplySubject, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplySubject), nil
	}
}

func (r replySubjectDo) Last() (*model.ReplySubject, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplySubject), nil
	}
}

func (r replySubjectDo) Find() ([]*model.ReplySubject, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReplySubject), err
}

func (r replySubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReplySubject, err error) {
	buf := make([]*model.ReplySubject, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r replySubjectDo) FindInBatches(result *[]*model.ReplySubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r replySubjectDo) Attrs(attrs ...field.AssignExpr) IReplySubjectDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r replySubjectDo) Assign(attrs ...field.AssignExpr) IReplySubjectDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r replySubjectDo) Joins(fields ...field.RelationField) IReplySubjectDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r replySubjectDo) Preload(fields ...field.RelationField) IReplySubjectDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r replySubjectDo) FirstOrInit() (*model.ReplySubject, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplySubject), nil
	}
}

func (r replySubjectDo) FirstOrCreate() (*model.ReplySubject, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplySubject), nil
	}
}

func (r replySubjectDo) FindByPage(offset int, limit int) (result []*model.ReplySubject, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r replySubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r replySubjectDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r replySubjectDo) Delete(models ...*model.ReplySubject) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *replySubjectDo) withDO(do gen.Dao) *replySubjectDo {
	r.DO = *do.(*gen.DO)
	return r
}
