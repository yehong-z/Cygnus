// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yehong-z/Cygnus/reply/service/pkg/dao/gen/model/model"
)

func newReplyIndex(db *gorm.DB, opts ...gen.DOOption) replyIndex {
	_replyIndex := replyIndex{}

	_replyIndex.replyIndexDo.UseDB(db, opts...)
	_replyIndex.replyIndexDo.UseModel(&model.ReplyIndex{})

	tableName := _replyIndex.replyIndexDo.TableName()
	_replyIndex.ALL = field.NewAsterisk(tableName)
	_replyIndex.ID = field.NewInt64(tableName, "id")
	_replyIndex.UserID = field.NewInt64(tableName, "user_id")
	_replyIndex.SubjectID = field.NewInt64(tableName, "subject_id")
	_replyIndex.RootID = field.NewInt64(tableName, "root_id")
	_replyIndex.ParentID = field.NewInt64(tableName, "parent_id")
	_replyIndex.Floor = field.NewInt64(tableName, "floor")
	_replyIndex.Like = field.NewInt64(tableName, "like")
	_replyIndex.Hate = field.NewInt64(tableName, "hate")
	_replyIndex.ReplyCount = field.NewInt64(tableName, "reply_count")
	_replyIndex.State = field.NewInt64(tableName, "state")
	_replyIndex.UpReply = field.NewInt64(tableName, "up_reply")
	_replyIndex.Top = field.NewInt64(tableName, "top")
	_replyIndex.Ctime = field.NewTime(tableName, "ctime")
	_replyIndex.Mtime = field.NewTime(tableName, "mtime")

	_replyIndex.fillFieldMap()

	return _replyIndex
}

type replyIndex struct {
	replyIndexDo replyIndexDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64
	SubjectID  field.Int64
	RootID     field.Int64
	ParentID   field.Int64
	Floor      field.Int64
	Like       field.Int64
	Hate       field.Int64
	ReplyCount field.Int64
	State      field.Int64
	UpReply    field.Int64
	Top        field.Int64
	Ctime      field.Time
	Mtime      field.Time

	fieldMap map[string]field.Expr
}

func (r replyIndex) Table(newTableName string) *replyIndex {
	r.replyIndexDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r replyIndex) As(alias string) *replyIndex {
	r.replyIndexDo.DO = *(r.replyIndexDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *replyIndex) updateTableName(table string) *replyIndex {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.UserID = field.NewInt64(table, "user_id")
	r.SubjectID = field.NewInt64(table, "subject_id")
	r.RootID = field.NewInt64(table, "root_id")
	r.ParentID = field.NewInt64(table, "parent_id")
	r.Floor = field.NewInt64(table, "floor")
	r.Like = field.NewInt64(table, "like")
	r.Hate = field.NewInt64(table, "hate")
	r.ReplyCount = field.NewInt64(table, "reply_count")
	r.State = field.NewInt64(table, "state")
	r.UpReply = field.NewInt64(table, "up_reply")
	r.Top = field.NewInt64(table, "top")
	r.Ctime = field.NewTime(table, "ctime")
	r.Mtime = field.NewTime(table, "mtime")

	r.fillFieldMap()

	return r
}

func (r *replyIndex) WithContext(ctx context.Context) IReplyIndexDo {
	return r.replyIndexDo.WithContext(ctx)
}

func (r replyIndex) TableName() string { return r.replyIndexDo.TableName() }

func (r replyIndex) Alias() string { return r.replyIndexDo.Alias() }

func (r replyIndex) Columns(cols ...field.Expr) gen.Columns { return r.replyIndexDo.Columns(cols...) }

func (r *replyIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *replyIndex) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 14)
	r.fieldMap["id"] = r.ID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["subject_id"] = r.SubjectID
	r.fieldMap["root_id"] = r.RootID
	r.fieldMap["parent_id"] = r.ParentID
	r.fieldMap["floor"] = r.Floor
	r.fieldMap["like"] = r.Like
	r.fieldMap["hate"] = r.Hate
	r.fieldMap["reply_count"] = r.ReplyCount
	r.fieldMap["state"] = r.State
	r.fieldMap["up_reply"] = r.UpReply
	r.fieldMap["top"] = r.Top
	r.fieldMap["ctime"] = r.Ctime
	r.fieldMap["mtime"] = r.Mtime
}

func (r replyIndex) clone(db *gorm.DB) replyIndex {
	r.replyIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r replyIndex) replaceDB(db *gorm.DB) replyIndex {
	r.replyIndexDo.ReplaceDB(db)
	return r
}

type replyIndexDo struct{ gen.DO }

type IReplyIndexDo interface {
	gen.SubQuery
	Debug() IReplyIndexDo
	WithContext(ctx context.Context) IReplyIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReplyIndexDo
	WriteDB() IReplyIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReplyIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReplyIndexDo
	Not(conds ...gen.Condition) IReplyIndexDo
	Or(conds ...gen.Condition) IReplyIndexDo
	Select(conds ...field.Expr) IReplyIndexDo
	Where(conds ...gen.Condition) IReplyIndexDo
	Order(conds ...field.Expr) IReplyIndexDo
	Distinct(cols ...field.Expr) IReplyIndexDo
	Omit(cols ...field.Expr) IReplyIndexDo
	Join(table schema.Tabler, on ...field.Expr) IReplyIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReplyIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReplyIndexDo
	Group(cols ...field.Expr) IReplyIndexDo
	Having(conds ...gen.Condition) IReplyIndexDo
	Limit(limit int) IReplyIndexDo
	Offset(offset int) IReplyIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReplyIndexDo
	Unscoped() IReplyIndexDo
	Create(values ...*model.ReplyIndex) error
	CreateInBatches(values []*model.ReplyIndex, batchSize int) error
	Save(values ...*model.ReplyIndex) error
	First() (*model.ReplyIndex, error)
	Take() (*model.ReplyIndex, error)
	Last() (*model.ReplyIndex, error)
	Find() ([]*model.ReplyIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReplyIndex, err error)
	FindInBatches(result *[]*model.ReplyIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReplyIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReplyIndexDo
	Assign(attrs ...field.AssignExpr) IReplyIndexDo
	Joins(fields ...field.RelationField) IReplyIndexDo
	Preload(fields ...field.RelationField) IReplyIndexDo
	FirstOrInit() (*model.ReplyIndex, error)
	FirstOrCreate() (*model.ReplyIndex, error)
	FindByPage(offset int, limit int) (result []*model.ReplyIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReplyIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r replyIndexDo) Debug() IReplyIndexDo {
	return r.withDO(r.DO.Debug())
}

func (r replyIndexDo) WithContext(ctx context.Context) IReplyIndexDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r replyIndexDo) ReadDB() IReplyIndexDo {
	return r.Clauses(dbresolver.Read)
}

func (r replyIndexDo) WriteDB() IReplyIndexDo {
	return r.Clauses(dbresolver.Write)
}

func (r replyIndexDo) Session(config *gorm.Session) IReplyIndexDo {
	return r.withDO(r.DO.Session(config))
}

func (r replyIndexDo) Clauses(conds ...clause.Expression) IReplyIndexDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r replyIndexDo) Returning(value interface{}, columns ...string) IReplyIndexDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r replyIndexDo) Not(conds ...gen.Condition) IReplyIndexDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r replyIndexDo) Or(conds ...gen.Condition) IReplyIndexDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r replyIndexDo) Select(conds ...field.Expr) IReplyIndexDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r replyIndexDo) Where(conds ...gen.Condition) IReplyIndexDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r replyIndexDo) Order(conds ...field.Expr) IReplyIndexDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r replyIndexDo) Distinct(cols ...field.Expr) IReplyIndexDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r replyIndexDo) Omit(cols ...field.Expr) IReplyIndexDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r replyIndexDo) Join(table schema.Tabler, on ...field.Expr) IReplyIndexDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r replyIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReplyIndexDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r replyIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IReplyIndexDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r replyIndexDo) Group(cols ...field.Expr) IReplyIndexDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r replyIndexDo) Having(conds ...gen.Condition) IReplyIndexDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r replyIndexDo) Limit(limit int) IReplyIndexDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r replyIndexDo) Offset(offset int) IReplyIndexDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r replyIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReplyIndexDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r replyIndexDo) Unscoped() IReplyIndexDo {
	return r.withDO(r.DO.Unscoped())
}

func (r replyIndexDo) Create(values ...*model.ReplyIndex) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r replyIndexDo) CreateInBatches(values []*model.ReplyIndex, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r replyIndexDo) Save(values ...*model.ReplyIndex) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r replyIndexDo) First() (*model.ReplyIndex, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyIndex), nil
	}
}

func (r replyIndexDo) Take() (*model.ReplyIndex, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyIndex), nil
	}
}

func (r replyIndexDo) Last() (*model.ReplyIndex, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyIndex), nil
	}
}

func (r replyIndexDo) Find() ([]*model.ReplyIndex, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReplyIndex), err
}

func (r replyIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReplyIndex, err error) {
	buf := make([]*model.ReplyIndex, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r replyIndexDo) FindInBatches(result *[]*model.ReplyIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r replyIndexDo) Attrs(attrs ...field.AssignExpr) IReplyIndexDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r replyIndexDo) Assign(attrs ...field.AssignExpr) IReplyIndexDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r replyIndexDo) Joins(fields ...field.RelationField) IReplyIndexDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r replyIndexDo) Preload(fields ...field.RelationField) IReplyIndexDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r replyIndexDo) FirstOrInit() (*model.ReplyIndex, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyIndex), nil
	}
}

func (r replyIndexDo) FirstOrCreate() (*model.ReplyIndex, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReplyIndex), nil
	}
}

func (r replyIndexDo) FindByPage(offset int, limit int) (result []*model.ReplyIndex, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r replyIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r replyIndexDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r replyIndexDo) Delete(models ...*model.ReplyIndex) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *replyIndexDo) withDO(do gen.Dao) *replyIndexDo {
	r.DO = *do.(*gen.DO)
	return r
}
