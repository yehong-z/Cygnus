// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v4.22.2
// source: api/api.proto

package api

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// ReplyClient is the client API for Reply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplyClient interface {
	//	// 获取单条评论信息接口
	//	rpc Info(ReplyInfoReq) returns (ReplyInfoReply);
	//
	// 发送评论接口
	Add(ctx context.Context, in *AddReq, opts ...grpc_go.CallOption) (*AddResp, common.ErrorWithAttachment)
	// 点赞
	Like(ctx context.Context, in *LikeReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment)
	// 取消点赞
	CancelLike(ctx context.Context, in *CancelLikeReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment)
	// 点踩
	Dislike(ctx context.Context, in *DislikeReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment)
	// 取消点踩
	CancelDislike(ctx context.Context, in *CancelDislikeReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment)
	// 举报
	Report(ctx context.Context, in *ReportReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment)
	// 查询根评论
	MainList(ctx context.Context, in *MainListReq, opts ...grpc_go.CallOption) (*ReplysResp, common.ErrorWithAttachment)
	// 查询一个评论下的所有子评论
	Detail(ctx context.Context, in *DetailReq, opts ...grpc_go.CallOption) (*ReplysResp, common.ErrorWithAttachment)
}

type replyClient struct {
	cc *triple.TripleConn
}

type ReplyClientImpl struct {
	Add           func(ctx context.Context, in *AddReq) (*AddResp, error)
	Like          func(ctx context.Context, in *LikeReq) (*CommonResp, error)
	CancelLike    func(ctx context.Context, in *CancelLikeReq) (*CommonResp, error)
	Dislike       func(ctx context.Context, in *DislikeReq) (*CommonResp, error)
	CancelDislike func(ctx context.Context, in *CancelDislikeReq) (*CommonResp, error)
	Report        func(ctx context.Context, in *ReportReq) (*CommonResp, error)
	MainList      func(ctx context.Context, in *MainListReq) (*ReplysResp, error)
	Detail        func(ctx context.Context, in *DetailReq) (*ReplysResp, error)
}

func (c *ReplyClientImpl) GetDubboStub(cc *triple.TripleConn) ReplyClient {
	return NewReplyClient(cc)
}

func (c *ReplyClientImpl) XXX_InterfaceName() string {
	return "api.Reply"
}

func NewReplyClient(cc *triple.TripleConn) ReplyClient {
	return &replyClient{cc}
}

func (c *replyClient) Add(ctx context.Context, in *AddReq, opts ...grpc_go.CallOption) (*AddResp, common.ErrorWithAttachment) {
	out := new(AddResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Add", in, out)
}

func (c *replyClient) Like(ctx context.Context, in *LikeReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment) {
	out := new(CommonResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Like", in, out)
}

func (c *replyClient) CancelLike(ctx context.Context, in *CancelLikeReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment) {
	out := new(CommonResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CancelLike", in, out)
}

func (c *replyClient) Dislike(ctx context.Context, in *DislikeReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment) {
	out := new(CommonResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Dislike", in, out)
}

func (c *replyClient) CancelDislike(ctx context.Context, in *CancelDislikeReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment) {
	out := new(CommonResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/CancelDislike", in, out)
}

func (c *replyClient) Report(ctx context.Context, in *ReportReq, opts ...grpc_go.CallOption) (*CommonResp, common.ErrorWithAttachment) {
	out := new(CommonResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Report", in, out)
}

func (c *replyClient) MainList(ctx context.Context, in *MainListReq, opts ...grpc_go.CallOption) (*ReplysResp, common.ErrorWithAttachment) {
	out := new(ReplysResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/MainList", in, out)
}

func (c *replyClient) Detail(ctx context.Context, in *DetailReq, opts ...grpc_go.CallOption) (*ReplysResp, common.ErrorWithAttachment) {
	out := new(ReplysResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Detail", in, out)
}

// ReplyServer is the server API for Reply service.
// All implementations must embed UnimplementedReplyServer
// for forward compatibility
type ReplyServer interface {
	//	// 获取单条评论信息接口
	//	rpc Info(ReplyInfoReq) returns (ReplyInfoReply);
	//
	// 发送评论接口
	Add(context.Context, *AddReq) (*AddResp, error)
	// 点赞
	Like(context.Context, *LikeReq) (*CommonResp, error)
	// 取消点赞
	CancelLike(context.Context, *CancelLikeReq) (*CommonResp, error)
	// 点踩
	Dislike(context.Context, *DislikeReq) (*CommonResp, error)
	// 取消点踩
	CancelDislike(context.Context, *CancelDislikeReq) (*CommonResp, error)
	// 举报
	Report(context.Context, *ReportReq) (*CommonResp, error)
	// 查询根评论
	MainList(context.Context, *MainListReq) (*ReplysResp, error)
	// 查询一个评论下的所有子评论
	Detail(context.Context, *DetailReq) (*ReplysResp, error)
	mustEmbedUnimplementedReplyServer()
}

// UnimplementedReplyServer must be embedded to have forward compatible implementations.
type UnimplementedReplyServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedReplyServer) Add(context.Context, *AddReq) (*AddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedReplyServer) Like(context.Context, *LikeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedReplyServer) CancelLike(context.Context, *CancelLikeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLike not implemented")
}
func (UnimplementedReplyServer) Dislike(context.Context, *DislikeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dislike not implemented")
}
func (UnimplementedReplyServer) CancelDislike(context.Context, *CancelDislikeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDislike not implemented")
}
func (UnimplementedReplyServer) Report(context.Context, *ReportReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedReplyServer) MainList(context.Context, *MainListReq) (*ReplysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainList not implemented")
}
func (UnimplementedReplyServer) Detail(context.Context, *DetailReq) (*ReplysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (s *UnimplementedReplyServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedReplyServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedReplyServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &Reply_ServiceDesc
}
func (s *UnimplementedReplyServer) XXX_InterfaceName() string {
	return "api.Reply"
}

func (UnimplementedReplyServer) mustEmbedUnimplementedReplyServer() {}

// UnsafeReplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplyServer will
// result in compilation errors.
type UnsafeReplyServer interface {
	mustEmbedUnimplementedReplyServer()
}

func RegisterReplyServer(s grpc_go.ServiceRegistrar, srv ReplyServer) {
	s.RegisterService(&Reply_ServiceDesc, srv)
}

func _Reply_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Add", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Like", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_CancelLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CancelLike", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_Dislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Dislike", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_CancelDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDislikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("CancelDislike", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Report", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_MainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(MainListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("MainList", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Reply_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Detail", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// Reply_ServiceDesc is the grpc_go.ServiceDesc for Reply service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reply_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "api.Reply",
	HandlerType: (*ReplyServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Reply_Add_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _Reply_Like_Handler,
		},
		{
			MethodName: "CancelLike",
			Handler:    _Reply_CancelLike_Handler,
		},
		{
			MethodName: "Dislike",
			Handler:    _Reply_Dislike_Handler,
		},
		{
			MethodName: "CancelDislike",
			Handler:    _Reply_CancelDislike_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Reply_Report_Handler,
		},
		{
			MethodName: "MainList",
			Handler:    _Reply_MainList_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Reply_Detail_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api/api.proto",
}
