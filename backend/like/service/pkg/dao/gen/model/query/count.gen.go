// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yehong-z/Cygnus/like/service/pkg/dao/gen/model/model"
)

func newCount(db *gorm.DB, opts ...gen.DOOption) count {
	_count := count{}

	_count.countDo.UseDB(db, opts...)
	_count.countDo.UseModel(&model.Count{})

	tableName := _count.countDo.TableName()
	_count.ALL = field.NewAsterisk(tableName)
	_count.ID = field.NewInt64(tableName, "id")
	_count.ObjectID = field.NewInt64(tableName, "object_id")
	_count.LikesCount = field.NewInt64(tableName, "likes_count")
	_count.DislikesCount = field.NewInt64(tableName, "dislikes_count")

	_count.fillFieldMap()

	return _count
}

type count struct {
	countDo countDo

	ALL           field.Asterisk
	ID            field.Int64
	ObjectID      field.Int64
	LikesCount    field.Int64
	DislikesCount field.Int64

	fieldMap map[string]field.Expr
}

func (c count) Table(newTableName string) *count {
	c.countDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c count) As(alias string) *count {
	c.countDo.DO = *(c.countDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *count) updateTableName(table string) *count {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ObjectID = field.NewInt64(table, "object_id")
	c.LikesCount = field.NewInt64(table, "likes_count")
	c.DislikesCount = field.NewInt64(table, "dislikes_count")

	c.fillFieldMap()

	return c
}

func (c *count) WithContext(ctx context.Context) ICountDo { return c.countDo.WithContext(ctx) }

func (c count) TableName() string { return c.countDo.TableName() }

func (c count) Alias() string { return c.countDo.Alias() }

func (c count) Columns(cols ...field.Expr) gen.Columns { return c.countDo.Columns(cols...) }

func (c *count) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *count) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["object_id"] = c.ObjectID
	c.fieldMap["likes_count"] = c.LikesCount
	c.fieldMap["dislikes_count"] = c.DislikesCount
}

func (c count) clone(db *gorm.DB) count {
	c.countDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c count) replaceDB(db *gorm.DB) count {
	c.countDo.ReplaceDB(db)
	return c
}

type countDo struct{ gen.DO }

type ICountDo interface {
	gen.SubQuery
	Debug() ICountDo
	WithContext(ctx context.Context) ICountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICountDo
	WriteDB() ICountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICountDo
	Not(conds ...gen.Condition) ICountDo
	Or(conds ...gen.Condition) ICountDo
	Select(conds ...field.Expr) ICountDo
	Where(conds ...gen.Condition) ICountDo
	Order(conds ...field.Expr) ICountDo
	Distinct(cols ...field.Expr) ICountDo
	Omit(cols ...field.Expr) ICountDo
	Join(table schema.Tabler, on ...field.Expr) ICountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICountDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICountDo
	Group(cols ...field.Expr) ICountDo
	Having(conds ...gen.Condition) ICountDo
	Limit(limit int) ICountDo
	Offset(offset int) ICountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICountDo
	Unscoped() ICountDo
	Create(values ...*model.Count) error
	CreateInBatches(values []*model.Count, batchSize int) error
	Save(values ...*model.Count) error
	First() (*model.Count, error)
	Take() (*model.Count, error)
	Last() (*model.Count, error)
	Find() ([]*model.Count, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Count, err error)
	FindInBatches(result *[]*model.Count, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Count) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICountDo
	Assign(attrs ...field.AssignExpr) ICountDo
	Joins(fields ...field.RelationField) ICountDo
	Preload(fields ...field.RelationField) ICountDo
	FirstOrInit() (*model.Count, error)
	FirstOrCreate() (*model.Count, error)
	FindByPage(offset int, limit int) (result []*model.Count, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c countDo) Debug() ICountDo {
	return c.withDO(c.DO.Debug())
}

func (c countDo) WithContext(ctx context.Context) ICountDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c countDo) ReadDB() ICountDo {
	return c.Clauses(dbresolver.Read)
}

func (c countDo) WriteDB() ICountDo {
	return c.Clauses(dbresolver.Write)
}

func (c countDo) Session(config *gorm.Session) ICountDo {
	return c.withDO(c.DO.Session(config))
}

func (c countDo) Clauses(conds ...clause.Expression) ICountDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c countDo) Returning(value interface{}, columns ...string) ICountDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c countDo) Not(conds ...gen.Condition) ICountDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c countDo) Or(conds ...gen.Condition) ICountDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c countDo) Select(conds ...field.Expr) ICountDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c countDo) Where(conds ...gen.Condition) ICountDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c countDo) Order(conds ...field.Expr) ICountDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c countDo) Distinct(cols ...field.Expr) ICountDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c countDo) Omit(cols ...field.Expr) ICountDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c countDo) Join(table schema.Tabler, on ...field.Expr) ICountDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c countDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICountDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c countDo) RightJoin(table schema.Tabler, on ...field.Expr) ICountDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c countDo) Group(cols ...field.Expr) ICountDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c countDo) Having(conds ...gen.Condition) ICountDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c countDo) Limit(limit int) ICountDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c countDo) Offset(offset int) ICountDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c countDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICountDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c countDo) Unscoped() ICountDo {
	return c.withDO(c.DO.Unscoped())
}

func (c countDo) Create(values ...*model.Count) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c countDo) CreateInBatches(values []*model.Count, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c countDo) Save(values ...*model.Count) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c countDo) First() (*model.Count, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Count), nil
	}
}

func (c countDo) Take() (*model.Count, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Count), nil
	}
}

func (c countDo) Last() (*model.Count, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Count), nil
	}
}

func (c countDo) Find() ([]*model.Count, error) {
	result, err := c.DO.Find()
	return result.([]*model.Count), err
}

func (c countDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Count, err error) {
	buf := make([]*model.Count, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c countDo) FindInBatches(result *[]*model.Count, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c countDo) Attrs(attrs ...field.AssignExpr) ICountDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c countDo) Assign(attrs ...field.AssignExpr) ICountDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c countDo) Joins(fields ...field.RelationField) ICountDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c countDo) Preload(fields ...field.RelationField) ICountDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c countDo) FirstOrInit() (*model.Count, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Count), nil
	}
}

func (c countDo) FirstOrCreate() (*model.Count, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Count), nil
	}
}

func (c countDo) FindByPage(offset int, limit int) (result []*model.Count, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c countDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c countDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c countDo) Delete(models ...*model.Count) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *countDo) withDO(do gen.Dao) *countDo {
	c.DO = *do.(*gen.DO)
	return c
}
