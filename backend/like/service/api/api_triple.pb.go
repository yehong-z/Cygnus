// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v4.22.2
// source: api.proto

package api

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// ThumbupClient is the client API for Thumbup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThumbupClient interface {
	// 点赞接口
	Like(ctx context.Context, in *LikeReq, opts ...grpc_go.CallOption) (*LikeResp, common.ErrorWithAttachment)
	// 查询计数接口
	Stats(ctx context.Context, in *StatsReq, opts ...grpc_go.CallOption) (*StatsResp, common.ErrorWithAttachment)
	// 批量查询计数接口
	MultiStats(ctx context.Context, in *MultiStatsReq, opts ...grpc_go.CallOption) (*MultiStatsResp, common.ErrorWithAttachment)
	// 查询是否点赞接口
	HasLike(ctx context.Context, in *HasLikeReq, opts ...grpc_go.CallOption) (*HasLikeResp, common.ErrorWithAttachment)
	// 用户对业务的点赞列表
	UserLikes(ctx context.Context, in *UserLikesReq, opts ...grpc_go.CallOption) (*UserLikesResp, common.ErrorWithAttachment)
	// 对象的点赞人列表
	ItemLikes(ctx context.Context, in *ItemLikesReq, opts ...grpc_go.CallOption) (*ItemLikesResp, common.ErrorWithAttachment)
	// 用户点赞总数
	UserLikedCounts(ctx context.Context, in *UserLikedCountsReq, opts ...grpc_go.CallOption) (*UserLikedCountsResp, common.ErrorWithAttachment)
	// 获取批量用户点赞总数
	BatchLikedCounts(ctx context.Context, in *BatchLikedCountsReq, opts ...grpc_go.CallOption) (*BatchLikedCountsResp, common.ErrorWithAttachment)
}

type thumbupClient struct {
	cc *triple.TripleConn
}

type ThumbupClientImpl struct {
	Like             func(ctx context.Context, in *LikeReq) (*LikeResp, error)
	Stats            func(ctx context.Context, in *StatsReq) (*StatsResp, error)
	MultiStats       func(ctx context.Context, in *MultiStatsReq) (*MultiStatsResp, error)
	HasLike          func(ctx context.Context, in *HasLikeReq) (*HasLikeResp, error)
	UserLikes        func(ctx context.Context, in *UserLikesReq) (*UserLikesResp, error)
	ItemLikes        func(ctx context.Context, in *ItemLikesReq) (*ItemLikesResp, error)
	UserLikedCounts  func(ctx context.Context, in *UserLikedCountsReq) (*UserLikedCountsResp, error)
	BatchLikedCounts func(ctx context.Context, in *BatchLikedCountsReq) (*BatchLikedCountsResp, error)
}

func (c *ThumbupClientImpl) GetDubboStub(cc *triple.TripleConn) ThumbupClient {
	return NewThumbupClient(cc)
}

func (c *ThumbupClientImpl) XXX_InterfaceName() string {
	return "api.Thumbup"
}

func NewThumbupClient(cc *triple.TripleConn) ThumbupClient {
	return &thumbupClient{cc}
}

func (c *thumbupClient) Like(ctx context.Context, in *LikeReq, opts ...grpc_go.CallOption) (*LikeResp, common.ErrorWithAttachment) {
	out := new(LikeResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Like", in, out)
}

func (c *thumbupClient) Stats(ctx context.Context, in *StatsReq, opts ...grpc_go.CallOption) (*StatsResp, common.ErrorWithAttachment) {
	out := new(StatsResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Stats", in, out)
}

func (c *thumbupClient) MultiStats(ctx context.Context, in *MultiStatsReq, opts ...grpc_go.CallOption) (*MultiStatsResp, common.ErrorWithAttachment) {
	out := new(MultiStatsResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/MultiStats", in, out)
}

func (c *thumbupClient) HasLike(ctx context.Context, in *HasLikeReq, opts ...grpc_go.CallOption) (*HasLikeResp, common.ErrorWithAttachment) {
	out := new(HasLikeResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/HasLike", in, out)
}

func (c *thumbupClient) UserLikes(ctx context.Context, in *UserLikesReq, opts ...grpc_go.CallOption) (*UserLikesResp, common.ErrorWithAttachment) {
	out := new(UserLikesResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserLikes", in, out)
}

func (c *thumbupClient) ItemLikes(ctx context.Context, in *ItemLikesReq, opts ...grpc_go.CallOption) (*ItemLikesResp, common.ErrorWithAttachment) {
	out := new(ItemLikesResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/ItemLikes", in, out)
}

func (c *thumbupClient) UserLikedCounts(ctx context.Context, in *UserLikedCountsReq, opts ...grpc_go.CallOption) (*UserLikedCountsResp, common.ErrorWithAttachment) {
	out := new(UserLikedCountsResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/UserLikedCounts", in, out)
}

func (c *thumbupClient) BatchLikedCounts(ctx context.Context, in *BatchLikedCountsReq, opts ...grpc_go.CallOption) (*BatchLikedCountsResp, common.ErrorWithAttachment) {
	out := new(BatchLikedCountsResp)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/BatchLikedCounts", in, out)
}

// ThumbupServer is the server API for Thumbup service.
// All implementations must embed UnimplementedThumbupServer
// for forward compatibility
type ThumbupServer interface {
	// 点赞接口
	Like(context.Context, *LikeReq) (*LikeResp, error)
	// 查询计数接口
	Stats(context.Context, *StatsReq) (*StatsResp, error)
	// 批量查询计数接口
	MultiStats(context.Context, *MultiStatsReq) (*MultiStatsResp, error)
	// 查询是否点赞接口
	HasLike(context.Context, *HasLikeReq) (*HasLikeResp, error)
	// 用户对业务的点赞列表
	UserLikes(context.Context, *UserLikesReq) (*UserLikesResp, error)
	// 对象的点赞人列表
	ItemLikes(context.Context, *ItemLikesReq) (*ItemLikesResp, error)
	// 用户点赞总数
	UserLikedCounts(context.Context, *UserLikedCountsReq) (*UserLikedCountsResp, error)
	// 获取批量用户点赞总数
	BatchLikedCounts(context.Context, *BatchLikedCountsReq) (*BatchLikedCountsResp, error)
	mustEmbedUnimplementedThumbupServer()
}

// UnimplementedThumbupServer must be embedded to have forward compatible implementations.
type UnimplementedThumbupServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedThumbupServer) Like(context.Context, *LikeReq) (*LikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedThumbupServer) Stats(context.Context, *StatsReq) (*StatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedThumbupServer) MultiStats(context.Context, *MultiStatsReq) (*MultiStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiStats not implemented")
}
func (UnimplementedThumbupServer) HasLike(context.Context, *HasLikeReq) (*HasLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasLike not implemented")
}
func (UnimplementedThumbupServer) UserLikes(context.Context, *UserLikesReq) (*UserLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLikes not implemented")
}
func (UnimplementedThumbupServer) ItemLikes(context.Context, *ItemLikesReq) (*ItemLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemLikes not implemented")
}
func (UnimplementedThumbupServer) UserLikedCounts(context.Context, *UserLikedCountsReq) (*UserLikedCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLikedCounts not implemented")
}
func (UnimplementedThumbupServer) BatchLikedCounts(context.Context, *BatchLikedCountsReq) (*BatchLikedCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchLikedCounts not implemented")
}
func (s *UnimplementedThumbupServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedThumbupServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedThumbupServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &Thumbup_ServiceDesc
}
func (s *UnimplementedThumbupServer) XXX_InterfaceName() string {
	return "api.Thumbup"
}

func (UnimplementedThumbupServer) mustEmbedUnimplementedThumbupServer() {}

// UnsafeThumbupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThumbupServer will
// result in compilation errors.
type UnsafeThumbupServer interface {
	mustEmbedUnimplementedThumbupServer()
}

func RegisterThumbupServer(s grpc_go.ServiceRegistrar, srv ThumbupServer) {
	s.RegisterService(&Thumbup_ServiceDesc, srv)
}

func _Thumbup_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Like", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Stats", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_MultiStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("MultiStats", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_HasLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("HasLike", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_UserLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserLikes", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_ItemLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("ItemLikes", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_UserLikedCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLikedCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("UserLikedCounts", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbup_BatchLikedCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLikedCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("BatchLikedCounts", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// Thumbup_ServiceDesc is the grpc_go.ServiceDesc for Thumbup service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thumbup_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "api.Thumbup",
	HandlerType: (*ThumbupServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "Like",
			Handler:    _Thumbup_Like_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Thumbup_Stats_Handler,
		},
		{
			MethodName: "MultiStats",
			Handler:    _Thumbup_MultiStats_Handler,
		},
		{
			MethodName: "HasLike",
			Handler:    _Thumbup_HasLike_Handler,
		},
		{
			MethodName: "UserLikes",
			Handler:    _Thumbup_UserLikes_Handler,
		},
		{
			MethodName: "ItemLikes",
			Handler:    _Thumbup_ItemLikes_Handler,
		},
		{
			MethodName: "UserLikedCounts",
			Handler:    _Thumbup_UserLikedCounts_Handler,
		},
		{
			MethodName: "BatchLikedCounts",
			Handler:    _Thumbup_BatchLikedCounts_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}
